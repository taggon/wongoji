import { expect, describe, test } from 'bun:test';
import { format } from './format';

describe('간단한 문장', () => {
  let i = 1;

  test(`Case #${i++}: 안녕하세요. 반갑습니다.`, () => {
    expect(format('안녕하세요. 반갑습니다.')).toEqual([
      [' ', '안', '녕', '하', '세', '요', '.', '반', '갑', '습', '니', '다', '.'],
    ]);
  });

  test(`Case #${i++}: 대한민국은 Korea이다.`, () => {
    expect(format('대한민국은 Korea이다.')).toEqual([
      [' ', '대', '한', '민', '국', '은', ' ', 'K', 'or', 'ea', '이', '다', '.'],
    ]);
  });

  test(`Case #${i++}: 줄바꿈 처리`, () => {
    expect(format('걸음도 해깝고 방울소리가 밤 벌판에 한층 청청하게 울렸다.\n달이 어지간히 기울어졌다.')).toEqual([
      [' ', '걸', '음', '도', ' ', '해', '깝', '고', ' ', '방', '울', '소', '리', '가', ' ', '밤', ' ', '벌', '판', '에'],
      ['한', '층', ' ', '청', '청', '하', '게', ' ', '울', '렸', '다', '.'],
      [' ', '달', '이', ' ', '어', '지', '간', '히', ' ', '기', '울', '어', '졌', '다', '.'],
    ]);
  });

  test(`Case #${i++}: 온점과 닫는 따옴표`, () => {
    expect(format('"달이 뜨렸다."')).toEqual([
      [' ', '"', '달', '이', ' ', '뜨', '렸', '다', '."'],
    ]);
  });
});

describe('따옴표 처리 옵션', () => {
  const text = '"이걸 까셀라 부다!"하고 소리를 쳤다.';
  const text2 = '대체 이게 웬 속인지(지금까지도 난 영문을 모른다) 아버질 혼내 주기는 제가 내래 놓고 이제 와서는 달려들며, "에그머니!이 망할 게 아버지 죽이네!" 하고 내 귀를 뒤로 잡아당기며 마냥 우는 것이 아니냐.';

  test('스마트 인용 부호(useSmartQuote) 옵션이 true라면 따옴표와 홑따옴표를 유니코드 문자로 변경한다.', () => {
    expect(format(text, { useSmartQuote: true })).toEqual([
      [' ', '“', '이', '걸', ' ', '까', '셀', '라', ' ', '부', '다', '!', '”', '하', '고', ' ', '소', '리', '를', ' '],
      ['쳤', '다', '.'],
    ]);

    expect(format(text2, { useSmartQuote: true })).toEqual([
      [' ', '대', '체', ' ', '이', '게', ' ', '웬', ' ', '속', '인', '지', '(', '지', '금', '까', '지', '도', ' ', '난'],
      ['영', '문', '을', ' ', '모', '른', '다', ')', ' ', '아', '버', '질', ' ', '혼', '내', ' ', '주', '기', '는', ' '],
      ['제', '가', ' ', '내', '래', ' ', '놓', '고', ' ', '이', '제', ' ', '와', '서', '는', ' ', '달', '려', '들', '며,'],
      ['“', '에', '그', '머', '니', '!', ' ', '이', ' ', '망', '할', ' ', '게', ' ', '아', '버', '지', ' ', '죽', '이'],
      ['네', '!', '”', '하', '고', ' ', '내', ' ', '귀', '를', ' ', '뒤', '로', ' ', '잡', '아', '당', '기', '며', ' '],
      ['마', '냥', ' ', '우', '는', ' ', '것', '이', ' ', '아', '니', '냐', '.'],
    ]);
  });

  test('인용문 항상 줄바꿈() 옵션이 true라면 인용문을 독립된 문단에 표시한다.', () => {
    expect(format(text, { alwaysNewLineWithQuote: true })).toEqual([
      [' ', '"', '이', '걸', ' ', '까', '셀', '라', ' ', '부', '다', '!', '"'],
      ['하', '고', ' ', '소', '리', '를', ' ','쳤', '다', '.'],
    ]);

    expect(format(text2, { alwaysNewLineWithQuote: true })).toEqual([
      [' ', '대', '체', ' ', '이', '게', ' ', '웬', ' ', '속', '인', '지', '(', '지', '금', '까', '지', '도', ' ', '난'],
      ['영', '문', '을', ' ', '모', '른', '다', ')', ' ', '아', '버', '질', ' ', '혼', '내', ' ', '주', '기', '는', ' '],
      ['제', '가', ' ', '내', '래', ' ', '놓', '고', ' ', '이', '제', ' ', '와', '서', '는', ' ', '달', '려', '들', '며,'],
      [' ', '"', '에', '그', '머', '니', '!', ' ', '이', ' ', '망', '할', ' ', '게', ' ', '아', '버', '지', ' ', '죽'],
      [' ', '이', '네', '!', '"'],
      ['하', '고', ' ', '내', ' ', '귀', '를', ' ', '뒤', '로', ' ', '잡', '아', '당', '기', '며', ' ', '마', '냥', ' '],
      ['우', '는', ' ', '것', '이', ' ', '아', '니', '냐', '.'],
    ]);
  });
});
